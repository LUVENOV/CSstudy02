# 3. 운영체제

## 3.1 운영체제와 컴퓨터

### 3.1.1 운영체제의 역할과 구조

#### 운영체제의 역할

1. CPU 스케줄링과 프로세스 관리
2. 메모리 관리
3. 디스크 파일 관리
4. I/O 디바이스 관리

### 운영체제의 구조

아래 순서는 위부터 아래 순
리눅스는 GUI 대신 CLI만 있음

1. 유저 프로그램
2. 운영체제 : GUI, 시스템콜, 커널, 드라이버
   1. **GUI :** 사용자 인터페이스의 한 형태로 그래픽 아이콘을 마우스로 클릭하는 단순한 동작으로 컴퓨터와 상호 작용할 수 있도록 함
      **<-> CUI :** 명령어로 처리하는 인터페이스
   2. **시스템콜** : 아래 자세히 설명
   3. **커널** : 운영체제의 핵심 부분이자 시스템콜 인터페이스를 제공, 보안, 메모리, 프로세스, 파일 시스템, I/O 디바이스, U/O 요청 관리 등 운영체제의 중추역할
   4. **드라이버** : 하드웨어 제어를 위한 인터페이스
3. 하드웨어

#### 시스템콜

: 운영체제가 커널에 접근하기 위한 인터페이스로 유저 프로그램이 OS의 서비스를 받기 위해 커널 함수를 호출할 때 사용

- **구동과정 (대표 예시인 인터럽트를 예시)**

  - trap을 사용
  - 인터럽트 벡터의 특정 위치로 이동하여 인터럽트 서비스 루틴으로 이동
  - 올바른 I/O 요청인지 확인후 I/O 실행
  - 제어권을 시스템 콜 다음 명령으로 넘김 (완료)

- **목적 및 장점**

  - 컴퓨터 자원에 대한 직접 접근을 차단하고 프로그램을 다른 프로그램으로 부터 보호
    - == 프로그램이 I/O 접근이 필요하면 OS만 I/O controller와 접근이 가능하므로 권한을 넘겨줘야함
  - 일종의 추상화 단계로 네트워크 통신이나 데이터베이스와 같은 낮은 단계의 영역처리를 신경쓰지 않고 프로그램을 구현할 수 있음

- **Mode bit : 지금 CPU를 사용하는 주체가 OS or 사용자 프로그램인지 확인하는 플래그 변수+-**
  - **0 (커널모드) :** 운영체제가 CPU에서 실행중 > I/O 접근 등 모든 명령 실행 가능 (특권명령)
  - **1 (사용자모드) :** 사용자 프로그램이 CPU에서 실행중 > 제한된 명령만 실행가능 (보안 목적)

### 3.1.2 컴퓨터의 요소

#### 1. CPU (Central Processing Unit)

: "인터럽트"에 의해 단순히 메모리에 존재하는 명령어를 해석해서 실행함

- 운영체제의 커널이 프로그램을 메모리에 올려 프로세스로 만들면 CPU가 해당 프로세스를 순차적으로 처리

- 주요 구성품

  1.  ##### 제어장치 (CU : Control Unit)
      - 입출력장치간 통신 제어
      - 명령어를 읽고 해석
      - 데이터 처리를 위한 순서 결정
  2.  ##### 레지스터
      - CPU 안의 임시기억 장치
      - 연산속도가 메모리보다 수백배 빠름 (CPU에 가까울수록 연산이 빠름)
  3.  ##### ALU (산술 연산 장치)
      - 산술연산 (사칙연산) & 논리연산(논리합, 논리곱 등) 계산하는 디지털 회로
        <br>

- 연산 처리 과정
  1. CU가 메모리 & 레지스터에 계산할 값 로드
  2. CU가 레지스터에 있는 값을 계산하도록 ALU에게 명령
  3. 계산된 값을 레지스터에서 메모리로 저장
     <br>
- **인터럽트** : 어떠한 신호가 들어왔을 때 CPU를 잠시 정지하는 것
  현대의 운영체제는 인터럽트에 의해 구동됨, 인터럽트 없이는 OS 구동될 일이 없음
  - **인터럽트 벡터 :** 해당 인터럽트 처리 루틴 주소를 가지고 있음
  - **인터럽트 서비스 루틴 (핸들러 함수) :** 해당 인터럽트를 처리하는 커널함수
  - 인터럽트간 우선순위 존재
  - **인터럽트 종류**
    - ##### HW 인터럽트 (Interrupt)
      - 일반적인 의미의 interrupt
      - ex) device controller, timer 등
    - ##### SW 인터럽트 (Trap)
      - Exception : 프로그램 오류
      - System Call : 프로그램이 커널 함수를 호출하는 경우

+a) CPU : [프로그램 카운터 레지스터]에 저장된 주소값에 접근하여 명령 수행
특별한 일이 없으면 4byte씩 증가하여 순차적으로 처리
함수호출이나 제어문 등 > 주소 점프 jump instruction

#### 2. DMA Controller

: I/O 디바이스가 메모리에 직접 접근할 수 있도록 하는 HW 장치

- 기능 / 목적
  - CPU 말고 DMA controller도 메모리 접근 가능
  - **I/O Interrupt 오버헤드를 대신 받으며 CPU 부하 감소, 효율 증가**
  - **Memory Controller** : CPU / DMA Controller 메모리 동시 접근 방지

#### 3. 메모리

: 데이터나 상태, 명령어를 기록하는 장치

- CPU는 메모리와만 상호작용 (Local Buffer도 접근 가능)
- 따라서 메모리는 원칙적으로는 CPU만 접근 가능, I/O는 Local Buffer에 접근
  - 그러다보니 CPU가 Interrupt를 너무 많이 당함
  - 이를 방지하기 위해 **DMA Controller** 존재

#### 4. 타이머

: 특정 프로그램이 CPU를 독점하지 못하도록 일정 시간 후 interrupt

- 프로그램 B가 무한 루프를 돈다면? : 계속 CPU 소모하고 다른 프로그램으로 넘어가지 못함

- 최소단위 : 클럭, 틱

#### 5. 디바이스 컨트롤러

: 컴퓨터와 연결되어 있는 IO 디바이스들의 작은 CPU

- I/O 특성시 오래 걸리는 작업이 많음
  - 효율화를 위해 I/O에 CPU가 직접 데이터를 가져 오는 것이 아닌 controller에 명령하여 업무 분배
  - 작업 완료시 interrupt로 알려줌
  - I/O에서 입력값이 들어왔을 때도 마찬가지 (Local Buffer)

* **Device Controller : HW**
* **Device Driver : SW**, CPU가 I/O를 실행하기 위한 코드

### +a) 함수

- **사용자 정의 함수**
  자신의 프로그램에서 정의한 함수
- **라이브러리 함수**
  자신의 프로그램에서 정의하지 않고 가져다 쓰는 함수
- **커널 함수**
  OS의 함수 / 커널함수의 호출 = 시스템 콜 (I/O 사용, 주소 점프 불가능)

### +a) 입출력 방식 : 동기식 입출력 / 비동기식 입출력

**1. Synchronous I/O :** 기다려서 싱크를 맞춤 (주로 Read)

I/O 요청 후 입출력 작업이 완료된 후에야 제어가 사용자 프로그램에게 넘어감

- 구현 방법 1 (비효율적)

  - I/O가 끝날 때까지 CPU 낭비
  - 매시점 1개의 I/O만 일어날 수 있음

- 구현 방법 2 (일반적인 방법)
  - I/O가 완료될 때까지 해당 프로그램에게서 CPU를 빼앗음
  - I/O 처리를 기다리는 줄에 그 프로그램을 줄세움 (**CPU 스케줄링**)
  - 다른 프로그램에게 CPU를 줌

**2. Asynchronous I/O :** 주로 Write

I/O가 시작된 후 입출력 작업이 끝나기를 기다리지 않고 제어가 사용자 프로그램에게 넘어감

- 공통점 : Interrupt로 입출력 작업이 끝났다는 것을 알려줌
